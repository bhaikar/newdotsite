'use client';
import React, { useState, useEffect, useRef, useMemo } from 'react';
import Navbar from "@/components/navbar";
import Footer from "@/components/footer";
import Image from 'next/image';

const EventTimeline = () => {
  const [currentImageIndexes, setCurrentImageIndexes] = useState<{ [key: string]: number }>({});
  const timelineRef = useRef<HTMLDivElement>(null);
  const progressRef = useRef<HTMLDivElement>(null);
  const [activeItems, setActiveItems] = useState<Set<number>>(new Set());

  // Event data
  const events = useMemo(() => [
    {
      id: 1,
      year: "2K24",
      title: "Hack.MCE 4.0",
      images: [
        "/images/eventimages/HackMce4.0/1.jpg",
        "/images/eventimages/HackMce4.0/2.jpg",
        "/images/eventimages/HackMce4.0/3.jpg",
        "/images/eventimages/HackMce4.0/4.jpg",
        "/images/eventimages/HackMce4.0/5.jpg",
        "/images/eventimages/HackMce4.0/6.jpg"
      ],
      description: `HACK.MCE 4.0

Techno Gaming Fest 2024
Get Ready for the Ultimate Experience!
On Nov 22, Team DevOps hosted a thrilling state-level hackathon at MCE, bringing together brilliant minds to tackle the challenge of designing the MCE Student Hub! Creativity, collaboration, and innovation at their best!
On Nov 23, MCE hosted Cicada, a thrilling puzzle event crafted from scratch by our team! With 400 participants tackling intricate puzzles, it was a battle of wits, curiosity, and innovation. A memorable showcase of intellect and determination!
On Nov 24, MCE hosted an electrifying State-Level Gameathon featuring BGMI & Free Fire! With 200 gamers showcasing strategy, teamwork, and reflexes, it was a thrilling celebration of gaming culture and camaraderie.`
    },
    {
      id: 2,
      year: "2K23",
      title: "Hack.MCE 3.0",
      images: [
        "/images/eventimages/HackMce3.0/1.jpg",
        "/images/eventimages/HackMce3.0/2.jpg",
        "/images/eventimages/HackMce3.0/3.jpg",
        "/images/eventimages/HackMce3.0/4.jpg",
        "/images/eventimages/HackMce3.0/5.jpeg",
        "/images/eventimages/HackMce3.0/6.jpeg",
        "/images/eventimages/HackMce3.0/7.jpeg",
        "/images/eventimages/HackMce3.0/8.jpeg"
      ],
      description: `HACK.MCE 3.0

hosted by the DevOps team, was a grand event that took place on the 16th, 17th, and 22nd of December 2023. The festivities kicked off with the Gameathon, an eagerly anticipated inter-branch e-sports competition that energized the campus, with prelims held a week prior at the bustling college canteen.
The fest was more than just a competitionâ€”it was a celebration of creativity, collaboration, and community. It successfully brought together tech enthusiasts and gamers, fostering an environment of learning, networking, and fun. HACK.MCE 3.0 left a lasting impression, setting a high bar for future events and further solidifying its place as a premier tech and gaming fest in the college.`
    },
    {
      id: 3,
      year: "2K22",
      title: "Hack.MCE 2.0",
      images: [
        "/images/eventimages/HackMce2.0/1.jpeg",
        "/images/eventimages/HackMce2.0/2.jpeg",
        "/images/eventimages/HackMce2.0/3.jpeg",
        "/images/eventimages/HackMce2.0/6.jpeg",
        "/images/eventimages/HackMce2.0/7.jpeg"
      ],
      description: `HACK.MCE 2.0

The Techno Gaming Fest took place on the 18th and 19th of June 2022, featuring a dynamic lineup of tech-based events such as Debug, Circuitmania, and Webpage Designing, among many others. This grand fest wasn't just about tech; it also celebrated the spirit of gaming with Gameathon, an inter-branch e-sports event that brought out the competitive spirit among participants. The Gameathon prelims kicked off a week before the main event, creating a buzz in the college canteen as students gathered to showcase their gaming skills. The fest was a huge success, blending technology and gaming into an unforgettable experience for all attendees.`
    },
    {
      id: 4,
      year: "2k18",
      title: "Hack.MCE 1.0",
      images: [
        "/images/eventimages/HackMce1.0/1.jpeg",
        "/images/eventimages/HackMce1.0/2.jpeg",
        "/images/eventimages/HackMce1.0/3.jpeg",
        "/images/eventimages/HackMce1.0/4.jpeg"
      ],
      description: `HACK.MCE 1.0

A national-level Hackathon centered on the theme "Lifestyle" took place on the 28th, 29th, and 30th of October 2018. The event featured an intense 24-hour coding competition, where 80 students from various districts participated, showcasing their technical skills and creativity. In addition to the Hackathon, a workshop on the emerging topic of blockchain was conducted, providing participants with valuable insights into this cutting-edge technology. The event brought together a diverse group of tech enthusiasts, fostering innovation and learning in a collaborative environment.`
    },
    {
      id: 5,
      year: "2018",
      title: "DOT Bytes",
      images: [
        "/images/eventimages/DotBytes/1.png",
        "/images/eventimages/DotBytes/2.png",
        "/images/eventimages/DotBytes/3.png",
        "/images/eventimages/DotBytes/4.png"
      ],
      description: `Dot Bytes

The event .Bytes was successfully organized by the DevOps Team during the odd semester on the 3rd and 4th of November 2017. The event truly embodied the tagline, "Where Technology Meets Fun," as it creatively blended technical challenges with engaging activities, making technology both accessible and enjoyable for all participants
The event offered the team members valuable hands-on experience with software tools essential for application development, greatly enhancing their technical expertise. This not only inspired the students of MCE but also fostered a culture of innovation and creativity on campus.
Two standout events, Thief City and Phat Anthaheli, were major highlights of .Bytes. Thief City challenged participants with puzzles and problem-solving tasks rooted in coding and logic, while Phat Anthaheli brought a playful, competitive edge, pushing participants to think outside the box and apply their technical knowledge in novel ways. The success of .Bytes demonstrated the power of combining learning with fun, leaving a lasting impact on everyone involved and setting a high standard for future events`
    }
  ], []);

  // Image slider functionality
  useEffect(() => {
    const intervalIds: { [key: string]: NodeJS.Timeout } = {};
    
    events.forEach((event) => {
      const eventKey = `event-${event.id}`;
      intervalIds[eventKey] = setInterval(() => {
        setCurrentImageIndexes(prev => ({
          ...prev,
          [eventKey]: ((prev[eventKey] || 0) + 1) % event.images.length
        }));
      }, 3000);
    });

    return () => {
      Object.values(intervalIds).forEach(intervalId => clearInterval(intervalId));
    };
  }, [events]);

  // Timeline scroll functionality
  useEffect(() => {
    let animationFrameId: number;
    let isUpdating = false;

    const updateTimeline = () => {
      if (!timelineRef.current || !progressRef.current) {
        isUpdating = false;
        return;
      }

      const timeline = timelineRef.current;
      const timelineLineProgress = progressRef.current;
      const timelineItems = timeline.querySelectorAll('.timeline-item');
      const timelinePoints = timeline.querySelectorAll('.timeline-point');
      
      if (timelineItems.length === 0 || timelinePoints.length === 0) {
        isUpdating = false;
        return;
      }

      const scrollY = window.scrollY;
      const windowHeight = window.innerHeight;
      const outerHeight = windowHeight;
      const newActiveItems = new Set<number>();

      const lastPoint = timelinePoints[timelinePoints.length - 1] as HTMLElement;

      const lastPointTop = lastPoint.getBoundingClientRect().top + scrollY;
      const progressLineTop = timelineLineProgress.getBoundingClientRect().top + scrollY;
      
      let progressHeight = scrollY - progressLineTop + outerHeight / 2;
      
      if (lastPointTop <= scrollY + outerHeight / 2) {
        progressHeight = lastPointTop - progressLineTop;
      }

      progressHeight = Math.max(0, progressHeight);
      
      timelineLineProgress.style.height = `${progressHeight}px`;

      timelineItems.forEach((item, index) => {
        const point = item.querySelector('.timeline-point') as HTMLElement;
        if (point) {
          const pointTop = point.getBoundingClientRect().top + scrollY;
          if (pointTop < scrollY + outerHeight * 0.5) {
            newActiveItems.add(index);
          }
        }
      });

      setActiveItems(newActiveItems);
      isUpdating = false;
    };

    const handleScroll = () => {
      if (isUpdating) return;
      isUpdating = true;
      animationFrameId = requestAnimationFrame(updateTimeline);
    };

    const handleResize = () => {
      if (isUpdating) return;
      isUpdating = true;
      animationFrameId = requestAnimationFrame(updateTimeline);
    };

    window.addEventListener('scroll', handleScroll, { passive: true });
    window.addEventListener('resize', handleResize);
    
    handleScroll();

    return () => {
      window.removeEventListener('scroll', handleScroll);
      window.removeEventListener('resize', handleResize);
      if (animationFrameId) {
        cancelAnimationFrame(animationFrameId);
      }
    };
  }, []);

  // Image slider
  const ImageSlider = ({ images, eventId }: { images: string[]; eventId: number }) => {
    const eventKey = `event-${eventId}`;
    const currentIndex = currentImageIndexes[eventKey] || 0;

    return (
      <div className="w-full h-auto flex justify-center overflow-hidden relative">
        {images.map((image, index) => (
          <Image
            key={index}
            src={image}
            alt={`Event ${eventId} - ${index + 1}`}
            width={640}
            height={360}
            className={`w-full h-auto transition-opacity duration-300 absolute top-0 left-0 hover:shadow-[5px_5px_50px_rgba(255,255,255,0.438),-5px_-5px_50px_rgba(255,255,255,0.438)] ${
              index === currentIndex ? 'opacity-100 visible' : 'opacity-0 invisible'
            }`}
            priority={index === 0}
            loading={index === 0 ? undefined : "lazy"}
          />
        ))}
        <Image
          src={images[0]}
          alt=""
          width={640}
          height={360}
          className="w-full h-auto opacity-0"
        />
      </div>
    );
  };

  return (
    <div className="bg-slate-900 text-white font-['Inter'] overflow-x-hidden min-h-screen">
      <Navbar />

      {/* Hero Section */}
      <div className="pt-32 pb-16 text-center px-4">
        <h1 className="text-6xl md:text-8xl font-bold mb-8 bg-gradient-to-r from-cyan-400 via-blue-500 to-purple-600 bg-clip-text text-transparent animate-pulse">
          Our Journey
        </h1>
        <p className="text-xl text-slate-400 max-w-4xl mx-auto leading-relaxed">
          From passionate beginners to industry leaders, explore the milestones that shaped our DevOps community. 
          Each event represents innovation, collaboration, and the relentless pursuit of technical excellence.
        </p>
      </div>

      {/* Timeline Section */}
<div className="relative px-4 pb-20">
  <div className="max-w-6xl mx-auto">
    <div ref={timelineRef} className="relative">
      
      {/* Timeline line - always centered */}
      <div
        className="absolute left-1/2 transform -translate-x-1/2 w-0.5 bg-slate-700"
        style={{ height: '100%', top: 0, bottom: 0 }}
      >
        <div
          ref={progressRef}
          className="w-full bg-gradient-to-b from-cyan-400 to-blue-500 transition-all duration-500 ease-out"
          style={{ height: '0%' }}
        />
      </div>

      {/* Timeline items */}
      <div className="space-y-32"> {/* increased gap for balance */}
        {events.map((event, index) => (
          <div
            key={event.id}
            className="timeline-item relative flex flex-col md:flex-row"
          >
            {/* Timeline point */}
            <div
              className={`timeline-point absolute left-1/2 transform -translate-x-1/2 w-16 h-16 rounded-full border-4 flex items-center justify-center text-sm font-bold z-20 transition-all duration-500 ${
                activeItems.has(index) 
                  ? 'bg-gradient-to-r from-cyan-400 to-blue-500 border-cyan-400 text-slate-900 shadow-lg shadow-cyan-400/50' 
                  : 'bg-slate-800 border-slate-600 text-slate-300'
              }`}
            >
              {event.year}
            </div>

            {/* Content wrapper with spacing for timeline */}
            <div className="w-full flex">
              {index % 2 === 0 ? (
                <>
                  {/* Left card */}
                  <div className="w-full md:w-1/2 pr-12 flex justify-end">
                    <div
                      className={`max-w-lg bg-slate-800/50 backdrop-blur-sm border border-slate-700/50 rounded-2xl overflow-hidden shadow-2xl transition-all duration-700 hover:shadow-cyan-400/20 hover:scale-[1.02] ${
                        activeItems.has(index)
                          ? 'opacity-100 translate-x-0'
                          : '-translate-x-32 opacity-0'
                      }`}
                    >
                      <ImageSlider images={event.images} eventId={event.id} />
                      <div className="p-8">
                        <h3 className="text-2xl font-bold mb-4">{event.title}</h3>
                        <p className="text-slate-400 whitespace-pre-line">{event.description}</p>
                      </div>
                    </div>
                  </div>
                  {/* Spacer for right side */}
                  <div className="hidden md:block md:w-1/2" />
                </>
              ) : (
                <>
                  {/* Spacer for left side */}
                  <div className="hidden md:block md:w-1/2" />
                  {/* Right card */}
                  <div className="w-full md:w-1/2 pl-12 flex justify-start">
                    <div
                      className={`max-w-lg bg-slate-800/50 backdrop-blur-sm border border-slate-700/50 rounded-2xl overflow-hidden shadow-2xl transition-all duration-700 hover:shadow-cyan-400/20 hover:scale-[1.02] ${
                        activeItems.has(index)
                          ? 'opacity-100 translate-x-0'
                          : 'translate-x-32 opacity-0'
                      }`}
                    >
                      <ImageSlider images={event.images} eventId={event.id} />
                      <div className="p-8">
                        <h3 className="text-2xl font-bold mb-4">{event.title}</h3>
                        <p className="text-slate-400 whitespace-pre-line">{event.description}</p>
                      </div>
                    </div>
                  </div>
                </>
              )}
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
</div>
      <Footer />
    </div>
  );
};

export default EventTimeline;
